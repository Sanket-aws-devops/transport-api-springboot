name: Deploy Java API to EC2 (Dev Environment)

on:
  push:
    branches: [ "main" ]

jobs:
  build-deploy:
    runs-on: self-hosted
    environment: Dev

    env:
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v3

    - name: 🔐 Make Gradle Wrapper Executable
      run: chmod +x ./gradlew

    - name: 🛠️ Build Application
      run: ./gradlew clean build

    - name: 📂 Show Build Outputs
      run: ls -lh build/libs/

    - name: 📁 Ensure Deployment Directory Exists
      run: |
        sudo mkdir -p /opt/transport-api
        sudo chown -R ubuntu:ubuntu /opt/transport-api

    - name: 🚚 Deploy JAR to Server Directory
      run: |
        JAR_FILE=$(ls build/libs/*.jar | head -n 1)
        echo "Deploying $JAR_FILE to /opt/transport-api/transport-api.jar"
        sudo cp "$JAR_FILE" /opt/transport-api/transport-api.jar
        sudo chown ubuntu:ubuntu /opt/transport-api/transport-api.jar

    - name: 🚀 Start Application in Background
      run: |
        echo "Starting application with the following config:"
        echo "PORT: $SERVER_PORT"
        echo "DB_URL: $DB_URL"
        echo "USERNAME: $DB_USERNAME"

        JAR_PATH=/opt/transport-api/transport-api.jar
        LOG_FILE=/opt/transport-api/app.log

        # Kill existing process running the same JAR (optional cleanup)
        EXISTING_PID=$(pgrep -f "$JAR_PATH")
        if [ ! -z "$EXISTING_PID" ]; then
          echo "Stopping existing process: $EXISTING_PID"
          sudo kill -9 $EXISTING_PID
        fi

        echo "Starting new process..."
        nohup java \
          -Dserver.port=$SERVER_PORT \
          -Dspring.datasource.url=$DB_URL \
          -Dspring.datasource.username=$DB_USERNAME \
          -Dspring.datasource.password=$DB_PASSWORD \
          -jar $JAR_PATH | sudo tee $LOG_FILE > /dev/null 2>&1 &

        echo "✅ App started. Check logs: sudo tail -f $LOG_FILE"
